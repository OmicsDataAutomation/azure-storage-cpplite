name: build

on:
  push:
    paths-ignore:
      - '**/*.md'
  pull_request:
    paths-ignore:
      - '**/*.md'

env:
  CMAKE_BUILD_TYPE: Coverage
  CMAKE_BUILD_DIR: ${{github.workspace}}/build

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04]
        include:
          - os: macOS-11
            openssl-version: 1.1

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Install Prereqs - Ubuntu
      if: startsWith(matrix.os,'ubuntu')
      shell: bash
      run: |
        sudo apt-get update -q
        sudo apt-get -y install cmake lcov
        sudo apt-get -y install zlib1g-dev libssl-dev uuid-dev libcurl4-openssl-dev
        mkdir $CMAKE_BUILD_DIR

    - name: Install Prereqs - MacOS
      if: startsWith(matrix.os, 'macOS')
      shell: bash
      run: |
        brew list cmake &>/dev/null || brew install cmake
        brew list lcov &>/dev/null || brew install lcov
        brew uninstall --ignore-dependencies openssl@3
        brew uninstall --ignore-dependencies openssl@1.1
        # brew list openssl@${{matrix.openssl-version}} &>/dev/null || brew install openssl@${{matrix.openssl-version}}
        brew install openssl@${{matrix.openssl-version}}
        echo "Now print find /usr/local libcrypto"
        find /usr/local -name "libcrypto*dylib"
        echo "Printing openssl 1.1.1 dir content"
        ls /usr/local/Cellar/openssl@1.1/1.1.1s/
        echo "KMS done"
        ln -s /usr/local/Cellar/openssl@1.1/1.1.1s/lib/libssl.dylib /usr/local/lib/libssl.dylib 
        ln -s /usr/local/Cellar/openssl@1.1/1.1.1s/lib/libcrypto.dylib /usr/local/lib/libcrypto.dylib 
        mkdir $CMAKE_BUILD_DIR

    - name: Build
      shell: bash
      working-directory: ${{env.CMAKE_BUILD_DIR}}
      run: |
        export OPENSSL_VERSION=${{matrix.openssl-version}}
        if [[ !  -z  ${OPENSSL_VERSION} ]]; then
          echo "*** OPENSSL_VERSION found"
          echo "Printing contents of usr local opt"
          ls -l /usr/local/opt/*
          echo "Done123"
          cmake -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE -DBUILD_TESTS=ON $GITHUB_WORKSPACE
        else
          echo "*** OPENSSL_VERSION NOT found"
        cmake -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE -DBUILD_TESTS=ON $GITHUB_WORKSPACE
        fi
        make -j4
        make test

    - name: Launch Azurite
      shell: bash
      run: |
        npm install -g azurite
        mkdir $CMAKE_BUILD_DIR/azurite
        echo "*** Azurite version = $(azurite --version)"
        azurite --silent --loose --location $CMAKE_BUILD_DIR/azurite &
        
    - name: Test with Azurite
      shell: bash
      working-directory: ${{env.CMAKE_BUILD_DIR}}
      run: |
         # Create container called test as TileDB expects the container to be already created
         az && echo "Azure CLI installed!"
         az storage container create -n test --connection-string "DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;QueueEndpoint=http://127.0.0.1:10001/devstoreaccount1;TableEndpoint=http://127.0.0.1:10002/devstoreaccount1;"
         ./azure-storage-test [blob]

    - name: Test
      shell: bash
      working-directory: ${{env.CMAKE_BUILD_DIR}}
      run: ./azure-storage-test
      env:
        TEST_CONNECTION_STRING: ${{ secrets.TEST_CONNECTION_STRING }}
        TEST_ADLS_CONNECTION_STRING: ${{ secrets.TEST_ADLS_CONNECTION_STRING }}

    - name: Upload Coverage to CodeCov
      uses: codecov/codecov-action@v3
      with:
        gcov: true

